---
layout: post
title:  "SVM初步分析"
date:   2017-03-19 10:23:05 +0800
categories: jekyll update
---
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>
### 缘起
最近项目想要做文本的主客观分类，调研了一下发现用svm做监督学习的思路是可以的，于是初步学习了两周的svm。
一直想动手写一点东西，但是又担心自己功力不够，犹犹豫豫之间浪费了很多时间，尤其感觉看了很多东西，但是最后生下来的不多，于是决定写一点儿来记录，回过头来看看自己的进步也好。
### 最大边界分类器
对于监督学习有很多的方法进行分类，svm无疑是其中最优秀的一种，相对于各种个样的不好理解的生成模型，支持向量机的数学模型十分简单，也好理解，其本质就是在一个多维的向量空间中找到一个超平面，
而这个超平面能够将标记的两种样本区别开来。
如图所示，我们在一个n维向量空间$$R^n$$中有两类向量，一种我们给它们打上标签$$y_0=-1$$（图中蓝色的点）,另外一种我们打上标签$$y_1=1$$（图中红色的点）
，从图中我们可以看到，两个颜色的点有着不同的向量特征，图中的直线就是一个能够将样本点区分的超平面，找到一个这样的平面不是什么难事儿，有无数个这样的超平面供我们进行选择，
![hyper-plane](https://raw.githubusercontent.com/sharkpen/sharkpen.github.io/master/public/upload/Hyper-Plane.png)
SMO算法一般被称为最小序列算法，和其他一些SVM的改进算法一样，是把整个二次规划为题分解为很多易于处理的小问题，不过SMO算法能够将问题分解到可能达到的最小规模
每次优化处理只处理两个样本，<font color="red" face="黑体">并且是使用解析的方法进行分析的</font>
### 序列选择
### 具体实现
{% highlight ruby %}
def print_hi(name)
  puts "Hi, #{name}"
end
print_hi('Tom')
#=> prints 'Hi, Tom' to STDOUT.
{% endhighlight %}

Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
